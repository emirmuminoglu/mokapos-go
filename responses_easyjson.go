// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package moka

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo(in *jlexer.Lexer, out *ThreeDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Data":
			out.Data = string(in.String())
		case "ResultCode":
			out.ResultCode = string(in.String())
		case "ResultMessage":
			out.ResultMessage = string(in.String())
		case "Exception":
			out.Exception = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo(out *jwriter.Writer, in ThreeDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix[1:])
		out.String(string(in.Data))
	}
	{
		const prefix string = ",\"ResultCode\":"
		out.RawString(prefix)
		out.String(string(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultMessage\":"
		out.RawString(prefix)
		out.String(string(in.ResultMessage))
	}
	{
		const prefix string = ",\"Exception\":"
		out.RawString(prefix)
		out.String(string(in.Exception))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ThreeDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ThreeDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ThreeDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ThreeDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo(l, v)
}
func easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo1(in *jlexer.Lexer, out *NonTDResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Data":
			easyjson559270aeDecode(in, &out.Data)
		case "ResultCode":
			out.ResultCode = string(in.String())
		case "ResultMessage":
			out.ResultMessage = string(in.String())
		case "Exception":
			out.Exception = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo1(out *jwriter.Writer, in NonTDResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix[1:])
		easyjson559270aeEncode(out, in.Data)
	}
	{
		const prefix string = ",\"ResultCode\":"
		out.RawString(prefix)
		out.String(string(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultMessage\":"
		out.RawString(prefix)
		out.String(string(in.ResultMessage))
	}
	{
		const prefix string = ",\"Exception\":"
		out.RawString(prefix)
		out.String(string(in.Exception))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NonTDResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NonTDResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComEmirmuminogluMokaposGo1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NonTDResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NonTDResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComEmirmuminogluMokaposGo1(l, v)
}
func easyjson559270aeDecode(in *jlexer.Lexer, out *struct {
	IsSuccessful       bool   `json:"IsSuccessful"`
	ResultCode         string `json:"ResultCode"`
	ResultMessage      string `json:"ResultMessage"`
	VirtualPostOrderID string `json:"VirtualPostOrderId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "IsSuccessful":
			out.IsSuccessful = bool(in.Bool())
		case "ResultCode":
			out.ResultCode = string(in.String())
		case "ResultMessage":
			out.ResultMessage = string(in.String())
		case "VirtualPostOrderId":
			out.VirtualPostOrderID = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode(out *jwriter.Writer, in struct {
	IsSuccessful       bool   `json:"IsSuccessful"`
	ResultCode         string `json:"ResultCode"`
	ResultMessage      string `json:"ResultMessage"`
	VirtualPostOrderID string `json:"VirtualPostOrderId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"IsSuccessful\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.IsSuccessful))
	}
	{
		const prefix string = ",\"ResultCode\":"
		out.RawString(prefix)
		out.String(string(in.ResultCode))
	}
	{
		const prefix string = ",\"ResultMessage\":"
		out.RawString(prefix)
		out.String(string(in.ResultMessage))
	}
	{
		const prefix string = ",\"VirtualPostOrderId\":"
		out.RawString(prefix)
		out.String(string(in.VirtualPostOrderID))
	}
	out.RawByte('}')
}
